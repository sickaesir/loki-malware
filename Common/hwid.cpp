#include "hwid.h"
#include <windows.h>
#include <Iphlpapi.h>
#include <intrin.h>
#include "md5_lib_src.h"
#pragma comment(lib, "IPHLPAPI.lib")

struct hash_struct
{
public:
	unsigned long long GetCheckSum()
	{

		auto getMacHash = []() -> unsigned short {

			auto hashMacAddr = [](PIP_ADAPTER_INFO info) -> unsigned short {

				unsigned short hash = 0;
				for (int i = 0; i < info->AddressLength; i++)
				{
					hash += (info->Address[i] << ((i & 1) * 8));
				}
				return hash;
			};

			IP_ADAPTER_INFO AdapterInfo[32];
			DWORD dwBufLen = sizeof(AdapterInfo);

			DWORD dwStatus = GetAdaptersInfo(AdapterInfo, &dwBufLen);
			if (dwStatus != ERROR_SUCCESS)
				return 0; // no adapters.      

			PIP_ADAPTER_INFO pAdapterInfo = AdapterInfo;
			unsigned short mac1 = hashMacAddr(pAdapterInfo);
			unsigned short mac2 = 0;
			if (pAdapterInfo->Next)
				mac2 = hashMacAddr(pAdapterInfo->Next);

			return mac1 ^ mac2;
		};

		auto getVolumeHash = []() -> unsigned short {
			DWORD serialNum = 0;

			GetVolumeInformation("c:\\", NULL, 0, &serialNum, NULL, NULL, NULL, 0);
			unsigned short hash = (unsigned short)((serialNum + (serialNum >> 16)) & 0xFFFF);

			return hash;
		};

		auto getCpuHash = []() -> unsigned short {
			int cpuinfo[4] = { 0, 0, 0, 0 };
			__cpuid(cpuinfo, 0);
			unsigned short hash = 0;
			unsigned short* ptr = (unsigned short*)(&cpuinfo[0]);
			for (int i = 0; i < 8; i++)
				hash += ptr[i];

			return hash;
		};

		auto getMachineNameHash = []() -> unsigned short {
			char computerName[1024];
			DWORD size = 1024;
			GetComputerName(computerName, &size);
			unsigned short hash = 0;
			MD5 md5;
			BYTE md5_binary[16];
			md5.MD5Encode(computerName, md5_binary);
			hash = *(unsigned short*)md5_binary;
			for (int i = 1; i < 8; i++)
			{
				hash ^= *(((unsigned short*)md5_binary) + i);
			}

			return hash;
		};

		MacHash = getMacHash();
		VolumeHash = getVolumeHash();
		CpuHash = getCpuHash();
		MachineNameHash = getMachineNameHash();

		return Checksum;
	}
private:
	union
	{
		unsigned long long Checksum;
		struct
		{
			unsigned short MacHash;
			unsigned short VolumeHash;
			unsigned short CpuHash;
			unsigned short MachineNameHash;
		};
	};
};


unsigned long long get_hwid()
{
	return hash_struct().GetCheckSum();
}
