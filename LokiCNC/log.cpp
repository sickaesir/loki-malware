#include <fstream>
#include <windows.h>
#include <time.h>
#include "log.h"


client_log::client_log(unsigned long long hwid)
{
	char file[MAX_PATH];
	sprintf(file, ".\\Logs\\%llu_log.txt", hwid);
	log_file.open(file, std::fstream::out | std::fstream::app);
	log_critical_section = new CRITICAL_SECTION();
	InitializeCriticalSection(log_critical_section);
}


client_log::~client_log()
{
	log_file.close();
	EnterCriticalSection(log_critical_section);
	LeaveCriticalSection(log_critical_section);
	DeleteCriticalSection(log_critical_section);
	delete log_critical_section;
}

void get_date_time(char* buffer)
{
	time_t rawtime;
	struct tm * timeinfo;

	time(&rawtime);
	timeinfo = localtime(&rawtime);

	char buf[80];
	strftime(buf, sizeof(buf), "%d-%m-%Y %I:%M:%S", timeinfo);
	strcpy(buffer, buf);
}

void client_log::write_log(const char* format, ...)
{
	EnterCriticalSection(log_critical_section);
	va_list v;

	va_start(v, format);
	char buf[1024];
	vsprintf(buf, format, v);

	char log_line[1100];
	char time_buffer[80];

	get_date_time(time_buffer);
	sprintf(log_line, "%s | %s", time_buffer, buf);
	log_file.write(log_line, strlen(log_line));
	log_file.flush();
	va_end(format);

	LeaveCriticalSection(log_critical_section);
}
